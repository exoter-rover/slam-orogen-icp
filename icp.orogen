name "icp"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
using_library "pcl_registration-1.7"
using_library "flann"

# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
import_types_from "base"
import_types_from "icpTypes.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the icp namespace.
task_context "GIcp" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #*************************
    #**** Task Properties ****
    #*************************
    property('config_parameters', 'icp/GICPConfiguration').
	doc 'Configuration parameters for the ICP.'

    #******************************
    #******* Input ports  *********
    #******************************
    input_port('point_cloud_model', 'base/samples/Pointcloud').
	doc 'Point cloud model (target).'

    input_port('point_cloud_samples', 'base/samples/Pointcloud').
	doc 'Point cloud samples (input).'

    input_port('initial_alignment', '/base/samples/RigidBodyState').
       doc " External initial pose alignment provided for the ICP."+
       "In case of no initial alignment provided a Sample Consensus Initial Alignment is computed"

    #******************************
    #******* Transformer  *********
    #******************************
    transformer do
        align_port("point_cloud_model", 0.01)
	align_port("point_cloud_samples", 0.01)
        max_latency(0.02)
    end


    #******************************
    #******* Output Ports *********
    #******************************
    output_port('pose_samples_out', '/base/samples/RigidBodyState').
	doc 'Estimated accumulative pose. Accumulative sum of T_input_target over time.'

    output_port('delta_pose_samples_out', '/base/samples/RigidBodyState').
	doc 'Delta estimated pose. Translation from input point cloud to target point cloud. T_input_target'

    #************************************
    #******* Output Debug Ports *********
    #************************************
    property('output_debug', 'bool', false).
	doc 'Set to true if output debug information is desirable.'

    output_port('icp_debug', 'icp/ICPDebug').
	doc 'icp extra debug information port.'



end

